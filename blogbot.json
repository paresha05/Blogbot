{
  "name": "My workflow 3 all urls",
  "nodes": [
    {
      "parameters": {},
      "id": "0963670a-788b-48f7-a807-7d1809ee46a9",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2240,
        824
      ]
    },
    {
      "parameters": {
        "url": "https://www.bitovi.com/sitemap.xml",
        "options": {}
      },
      "id": "38ccffe7-b49a-4f88-aa6c-b03aa80150a8",
      "name": "Fetch Sitemap",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2016,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract all blog URLs from sitemap.xml\nconst xml = $input.first().json.data;\n\n// Parse XML to find all blog URLs\nconst urlRegex = /<loc>(.*?)<\\/loc>/g;\nconst allUrls = [];\nlet match;\n\nwhile ((match = urlRegex.exec(xml)) !== null) {\n  const url = match[1];\n  // Filter only blog URLs\n  if (url.includes('/blog/') && \n      !url.includes('/blog/page/') && \n      !url.includes('/blog/topic/') &&\n      !url.includes('/blog#') &&\n      url !== 'https://www.bitovi.com/blog' &&\n      url !== 'https://bitovi.com/blog') {\n    allUrls.push({\n      url: url.replace('https://www.bitovi.com', 'https://bitovi.com'), // Normalize URL\n      status: 'pending',\n      discoveredAt: new Date().toISOString()\n    });\n  }\n}\n\n\n// Return ALL URLs as separate items\nreturn allUrls.map(urlData => ({ json: urlData }));\n\n\n\n//console.log(`Found ${allUrls.length} blog URLs from sitemap`);\n\n\n// Return URLs as separate items (limit to first 10 for testing)\n//return allUrls.slice(0, 10).map(urlData => ({ json: urlData }));"
      },
      "id": "923397f9-cb27-44e5-8276-c176a9d8f529",
      "name": "Extract Blog URLs from Sitemap",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1792,
        128
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS blog_urls (\n  id SERIAL PRIMARY KEY,\n  url VARCHAR(500) UNIQUE NOT NULL,\n  status VARCHAR(50) DEFAULT 'pending',\n  title TEXT,\n  author VARCHAR(200),\n  publish_date DATE,\n  tags TEXT,\n  content_length INTEGER,\n  excerpt TEXT,\n  discovered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  processed_at TIMESTAMP,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS blog_content (\n  id SERIAL PRIMARY KEY,\n  url VARCHAR(500) REFERENCES blog_urls(url) ON DELETE CASCADE,\n  content_chunk TEXT NOT NULL,\n  chunk_index INTEGER,\n  embedding_text TEXT,\n  metadata TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX IF NOT EXISTS idx_blog_urls_status ON blog_urls(status);\nCREATE INDEX IF NOT EXISTS idx_blog_urls_author ON blog_urls(author);\nCREATE INDEX IF NOT EXISTS idx_blog_urls_publish_date ON blog_urls(publish_date);\nCREATE INDEX IF NOT EXISTS idx_blog_content_url ON blog_content(url);",
        "options": {}
      },
      "id": "ce570264-1420-4429-b4bb-a04229cb9077",
      "name": "Create Database Tables",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -1568,
        32
      ],
      "credentials": {
        "postgres": {
          "id": "dOfBiFACcwrRwV6C",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO blog_urls (url, status, discovered_at) \nVALUES ('{{ $json.url }}', '{{ $json.status }}', '{{ $json.discoveredAt }}') \nON CONFLICT (url) DO NOTHING;\n\n",
        "options": {}
      },
      "id": "06a819e9-b32e-45c5-a20b-56c2b306ecfd",
      "name": "Store URLs in Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -1568,
        224
      ],
      "credentials": {
        "postgres": {
          "id": "dOfBiFACcwrRwV6C",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.urls }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.batchedUrls }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10,
              "batchInterval": 5000
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "cc9aaa64-3a44-4fd6-9ff4-e9e6dde87ecf",
      "name": "Fetch Blog Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1344,
        584
      ],
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "// Final summary of the scraping process\nconst items = $input.all();\nconst summary = {\n  totalUrlsProcessed: items.length,\n  successfulProcessing: items.filter(item => item.json.status === 'processed').length,\n  failedProcessing: items.filter(item => item.json.status === 'failed').length,\n  uniqueAuthors: [...new Set(items.map(item => item.json.author))].length,\n  totalContentChunks: items.reduce((sum, item) => sum + (item.json.chunks?.length || 0), 0),\n  completedAt: new Date().toISOString()\n};\n\n//console.log('Processing Summary:', summary);\nreturn { json: summary };"
      },
      "id": "274de9e4-64a7-429c-9258-49a1fac0886a",
      "name": "Create Processing Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1392,
        656
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id,url from blog_urls where status  = 'pending';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2016,
        824
      ],
      "id": "eb4bb0d4-7674-4a00-b56b-15499a1da534",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "dOfBiFACcwrRwV6C",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "569df8be-c93a-404b-84a4-d6bb8b06ccfc",
              "name": "urls",
              "value": "={{ $json.url }}",
              "type": "string"
            },
            {
              "id": "f0ee01d7-774f-425d-842a-24a4bec17567",
              "name": "batchedUrls",
              "value": "={{ $json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1568,
        584
      ],
      "id": "08c0c86a-dab2-47b8-840a-b93b3a684a21",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "## Fetching urls of all the blog pages from sitemap.xml. Parsed xml to filter urls.",
        "height": 368,
        "width": 1264
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2376,
        16
      ],
      "typeVersion": 1,
      "id": "6b821637-1e90-4fee-8eba-63bf74fa6e26",
      "name": "Sticky Note"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2240,
        128
      ],
      "id": "711478f5-259c-4f03-9b42-d1b179a6e86a",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "bitovi-blogs",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        256,
        656
      ],
      "id": "b8bc1995-7546-4f34-9cfd-7eb0ffeef0ae",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "tbJdFPTB0HjHjKwP",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "model": "llama3.2:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        256,
        1152
      ],
      "id": "4edb759d-3f2b-4e8f-8a09-3d1e3127703b",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "fhm87OOgJApu9u3T",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content }}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "title",
                "value": "={{ $('extractedData').item.json.title }}"
              },
              {
                "name": "author",
                "value": "={{ $('extractedData').item.json.author }}"
              },
              {
                "name": "tags",
                "value": "={{ $('extractedData').item.json.tags }}"
              },
              {
                "name": "publish_date",
                "value": "={{ $('extractedData').item.json.publish_date }}"
              },
              {
                "name": "blog-page",
                "value": "={{ $('extractedData').item.json.url }}"
              },
              {
                "name": "order_by",
                "value": "={{ $now.format('x') }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        352,
        880
      ],
      "id": "50ed2fbb-099b-464d-894c-c836ece32a25",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 2000
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        432,
        1088
      ],
      "id": "d2fda01a-4972-48b3-b62c-bbb9b0937ead",
      "name": "Token Splitter"
    },
    {
      "parameters": {
        "batchSize": 2,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1792,
        824
      ],
      "id": "f9d5e366-484d-475c-a070-841be7f01344",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "bfeb531f-cfdb-49fe-b81c-a9528aae177b",
              "leftValue": "={{ $json.result.points.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            },
            {
              "id": "77ee239b-6116-43a7-bc4a-8235273e5f21",
              "leftValue": "={{ $json.result.points }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -672,
        488
      ],
      "id": "01cde417-dd7c-47de-b502-19a138cb400a",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new data to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.title = $('extractedData').first().json.title;\n  item.json.content = $('extractedData').first().json.content;\n  item.json.author = $('extractedData').first().json.author;\n  item.json.tags = $('extractedData').first().json.tags;\n  item.json.publish_date = $('extractedData').first().json.publish_date;\n  item.json.url = $('extractedData').first().json.url;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        488
      ],
      "id": "366452cf-e41b-4784-899d-73f32e6ae4e2",
      "name": "insert document"
    },
    {
      "parameters": {
        "jsCode": "// prepare data to upate of existing item\n\nlet pointsCount = $input.first().json.result.points.length;\nconst idsToUpdate = [];\n\nfor (let i = 0; i <= pointsCount-1; i++) {\n  //item.json.pointToUpdate = item.json.result.points[0].id;\n  let pointId = $input.first().json.result.points[i].id;\n    \n  //**   let pointContent = $input.first().json.result.points[i].payload.content;*/\n  //idsToUpdate.push({ pointId: pointContent});  \n  idsToUpdate.push(pointId);\n  //idsToUpdate[pointId] = pointContent;\n }\n  \nconst quotedIds = idsToUpdate.map(id => `\"${id}\"`); \nfor (const item of $input.all()) {\n  item.json.points = quotedIds\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        584
      ],
      "id": "6093b6a2-b889-4097-b597-0d58588215ed",
      "name": "update document"
    },
    {
      "parameters": {
        "jsCode": "// Document Insert Verification\n// Use this after your Qdrant insert operation\n\n\nlet pointsCount = $input.first().json.result.points.length;\nlet url = $input.first().json.result.points[0].payload.metadata['blog-page'];\nlet idsToUpdate = [];\nfor (let i = 0; i <= pointsCount-1; i++) {\n  //item.json.pointToUpdate = item.json.result.points[0].id;\n  let pointId = $input.first().json.result.points[i].id;\n  idsToUpdate.push( pointId ); \n  \n}\nreturn [{ json: { ids: idsToUpdate , count: pointsCount, url: url } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        656
      ],
      "id": "a2d74cfc-a630-492e-94ef-6cee7c1b355d",
      "name": "get inserted document response"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://qdrant:6333/collections/bitovi-blogs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"vectors\": {\n    \"size\": 3072,\n    \"distance\": \"Cosine\"\n  },\n  \"optimizers_config\": {\n    \"default_segment_number\": 2\n  },\n  \"replication_factor\": 1,\n  \"write_consistency_factor\": 1,\n  \"payload_schema\": {\n    \"content_hash\": \"keyword\",\n    \"created_at\": \"datetime\",\n    \"updated_at\": \"datetime\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1344,
        32
      ],
      "id": "734836ec-11a9-4477-9e92-78f922564339",
      "name": "HTTP Request1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://qdrant:6333/collections/bitovi-blogs/points/scroll",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"metadata.blog-page\",\n        \"match\": {\n          \"text\": \"{{ $json.url }}\"\n        }\n      }\n    ]\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -896,
        488
      ],
      "id": "166428fc-6e26-4543-8119-df3762baebad",
      "name": "HTTP Request for search duplicates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title",
              "returnValue": "html"
            },
            {
              "key": "content",
              "cssSelector": ".prose"
            },
            {
              "key": "author",
              "cssSelector": "p.text-\\[16px\\].font-bold"
            },
            {
              "key": "tags",
              "cssSelector": ".not-prose a",
              "skipSelectors": "img",
              "returnArray": true
            },
            {
              "key": "publish_date",
              "cssSelector": "div p time",
              "returnValue": "=text"
            },
            {
              "key": "url",
              "cssSelector": "meta[property=\"og:url\"]",
              "returnValue": "attribute",
              "attribute": "content"
            }
          ]
        },
        "options": {
          "trimValues": true,
          "cleanUpText": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -1120,
        584
      ],
      "id": "5ec138bc-3be5-43f3-a54a-73f1f259f525",
      "name": "extractedData"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://qdrant:6333/collections/bitovi-blogs/points/scroll",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"limit\": 10,\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"metadata.blog-page\",\n        \"match\": {\n          \"value\": \"{{ $('insert document').item.json.url }}\"\n        }\n      }\n    ]\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        656
      ],
      "id": "525bc8ec-6204-4e31-ac0c-7945d74da093",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://qdrant:6333/collections/bitovi-blogs/points/delete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"points\": [{{ $json.points }}]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -224,
        584
      ],
      "id": "13d05afc-43de-4d2d-9e10-90ff373a9009",
      "name": "Delete duplicate points of processing url",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE blog_urls \nSET status = 'fetched', points = '{{ $json.ids.join(\",\") }}' \nWHERE url = '{{ $json.url }}' \nRETURNING id, url, status, title, updated_at;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        656
      ],
      "id": "d5a24c91-2226-469c-8469-f03416c4ca90",
      "name": "update database with fetched urls.",
      "credentials": {
        "postgres": {
          "id": "dOfBiFACcwrRwV6C",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "html",
        "options": {
          "fileName": "Report of processed data."
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1616,
        656
      ],
      "id": "f81d43b2-0039-4370-8eff-49796b0049f9",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "blog_urls",
          "mode": "list",
          "cachedResultName": "blog_urls"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $json.url }}",
            "title": "={{ $json.title }}",
            "author": "={{ $json.author }}",
            "publish_date": "={{ $json.publish_date }}",
            "tags": "={{ $json.tags }}",
            "processed_at": "={{ $now }}",
            "updated_at": "={{ $now }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "author",
              "displayName": "author",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content_length",
              "displayName": "content_length",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "excerpt",
              "displayName": "excerpt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "discovered_at",
              "displayName": "discovered_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "processed_at",
              "displayName": "processed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "points",
              "displayName": "points",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -896,
        680
      ],
      "id": "da96a7e2-3e0c-435a-ac3c-477e8b4bd753",
      "name": "Insert or update rows in a table",
      "credentials": {
        "postgres": {
          "id": "dOfBiFACcwrRwV6C",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1008,
        1024
      ],
      "id": "c0e1773b-9097-4c6f-9094-8eb8b9c0b387",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1376,
        1024
      ],
      "id": "61070497-f818-469d-82ff-d3a27008fc8f",
      "name": "When chat message received",
      "webhookId": "adcd18f0-5da6-4f22-b85f-32d9f85d8c24"
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1040,
        1280
      ],
      "id": "87ee7bcd-dc11-44ab-a598-17e5d6623d0c",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -1264,
        1264
      ],
      "id": "165d2197-6f26-4b47-939a-6b135a151b1a",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "fhm87OOgJApu9u3T",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "You’re the friendly blog buddy for https://www.bitovi.com/blog — here to help visitors find what they need, answer their questions, and keep the conversation warm and welcoming. Think helpful friend who knows the blog inside out.\n\n",
        "qdrantCollection": {
          "__rl": true,
          "value": "bitovi-blogs",
          "mode": "list",
          "cachedResultName": "bitovi-blogs"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        -832,
        1232
      ],
      "id": "1b14557f-6007-40ef-9c72-be71f8d798cf",
      "name": "Qdrant Vector Store1",
      "credentials": {
        "qdrantApi": {
          "id": "tbJdFPTB0HjHjKwP",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "model": "llama3.2:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        -832,
        1424
      ],
      "id": "eea6d6cb-3e20-4c5f-9deb-dbaec48ab314",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "fhm87OOgJApu9u3T",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Chat conversation with knowledge base using AI Agent\n",
        "height": 592,
        "width": 1104,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1520,
        976
      ],
      "id": "0cfb7738-c9f8-467c-ab9f-8d78059c592d",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Sitemap": {
      "main": [
        [
          {
            "node": "Extract Blog URLs from Sitemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Blog URLs from Sitemap": {
      "main": [
        [
          {
            "node": "Create Database Tables",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store URLs in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store URLs in Database": {
      "main": [
        []
      ]
    },
    "Fetch Blog Content": {
      "main": [
        [
          {
            "node": "extractedData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Fetch Blog Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Sitemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "insert document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update document": {
      "main": [
        [
          {
            "node": "Delete duplicate points of processing url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert document": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Database Tables": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get inserted document response": {
      "main": [
        [
          {
            "node": "update database with fetched urls.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request for search duplicates": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "extractedData": {
      "main": [
        [
          {
            "node": "HTTP Request for search duplicates",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert or update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "get inserted document response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete duplicate points of processing url": {
      "main": [
        [
          {
            "node": "insert document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update database with fetched urls.": {
      "main": [
        [
          {
            "node": "Create Processing Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Processing Summary": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "56c6bab5-ba1c-47ae-8a35-e3eb6d5893ce",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ee1c540b8a7508314062e476d734dfd9cc649730db27c6a8fc83f31044ae1b82"
  },
  "id": "54tQSQ69O8wIfqb5",
  "tags": []
}